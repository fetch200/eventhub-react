{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","fnLists","eventHub","eventName","fn","push","data","fnList","forEach","store","restTime","handleData","time","this","alert","init","ReactDOM","render","App","document","getElementById","state","className","href","Father1","Father2","props","Son1","Son2","Son3","Son4","reduceTime","onClick","bind","console","log","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e6cfbfa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nlet fnLists = {}\nconst eventHub = {\n  on(eventName, fn) {\n    if (!fnLists[eventName]) { fnLists[eventName] = [] }\n    fnLists[eventName].push(fn)\n  },\n  trigger(eventName, data) {\n    const fnList = fnLists[eventName]\n    if (!fnList) { return }\n    fnList.forEach((fn) => fn(data))\n  }\n}\n\nconst store = {\n  restTime: 100,\n  handleData(time) {\n    if (this.restTime <= 0) { alert('时间用完啦'); return }\n    if (time > this.restTime) { alert('时间不够用哦'); return }\n    this.restTime -= time\n  },\n  init() {\n    eventHub.on('play', (time) => {\n      this.handleData(time)\n      ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n      );\n    })\n  }\n}\n\nstore.init()\n\nfunction App() {\n  const state = { restTime: store.restTime }\n  return (\n    <div className='app'>\n      <p className='describe'>\n        有一户人家，他们有一张游乐园卡，这张卡限定总共可以玩 100 个小时，家中有四个孩子，他们可以任意使用这张卡。\n        <br />\n        <br />\n        我们现在用 eventHub 来实现一个孩子去游玩后，每个孩子都能得到剩余的游玩时间。\n        <br />\n        <br />\n        源码链接：<a href='https://github.com/mcx2020/eventhub-react/blob/master/src/index.js'>https://github.com/mcx2020/eventhub-react/blob/master/src/index.js</a>\n      </p>\n      <main>\n        <Father1 data={state.restTime} />\n        <Father2 data={state.restTime} />\n      </main>\n    </div>\n  )\n}\n\nfunction Father1(props) {\n  return (\n    <div className='father1'>\n      <Son1 data={props.data} />\n      <Son2 data={props.data} />\n    </div>\n  )\n}\n\nfunction Father2(props) {\n  return (\n    <div className='father2'>\n      <Son3 data={props.data} />\n      <Son4 data={props.data} />\n    </div>\n  )\n}\n\nfunction Son1(props) {\n  const reduceTime = (time) => {\n    eventHub.trigger('play', time)\n  }\n  return (\n    <div className='son1'>\n      <div>我是Son1</div>\n      <div>剩余时间：{props.data} h</div>\n      <button onClick={reduceTime.bind(null, 1)}>玩了 1 个小时</button>\n      <button onClick={reduceTime.bind(null, 2)}>玩了 2 个小时</button>\n      <button onClick={reduceTime.bind(null, 3)}>玩了 3 个小时</button>\n    </div>\n  )\n}\n\nfunction Son2(props) {\n  const reduceTime = (time) => {\n    eventHub.trigger('play', time)\n  }\n  return (\n    <div className='son2'>\n      <div>我是Son2</div>\n      <div>剩余时间：{props.data} h</div>\n      <button onClick={reduceTime.bind(null, 1)}>玩了 1 个小时</button>\n      <button onClick={reduceTime.bind(null, 2)}>玩了 2 个小时</button>\n      <button onClick={reduceTime.bind(null, 3)}>玩了 3 个小时</button>\n    </div>\n  )\n}\n\nfunction Son3(props) {\n  const reduceTime = (time) => {\n    eventHub.trigger('play', time)\n  }\n  return (\n    <div className='son3'>\n      <div>我是Son3</div>\n      <div>剩余时间：{props.data} h</div>\n      <button onClick={reduceTime.bind(null, 1)}>玩了 1 个小时</button>\n      <button onClick={reduceTime.bind(null, 2)}>玩了 2 个小时</button>\n      <button onClick={reduceTime.bind(null, 3)}>玩了 3 个小时</button>\n    </div>\n  )\n}\n\nfunction Son4(props) {\n  const reduceTime = (time) => {\n    eventHub.trigger('play', time)\n  }\n  return (\n    <div className='son4'>\n      <div>我是Son4</div>\n      <div>剩余时间：{props.data} h</div>\n      <button onClick={reduceTime.bind(null, 1)}>玩了 1 个小时</button>\n      <button onClick={reduceTime.bind(null, 2)}>玩了 2 个小时</button>\n      <button onClick={reduceTime.bind(null, 3)}>玩了 3 个小时</button>\n    </div>\n  )\n}\n\nfunction myRender() {\n\n  console.log('render执行了')\n}\nmyRender()\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}